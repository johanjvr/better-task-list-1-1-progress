#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BetterTaskList.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BetterTaskList_Progress")]
	public partial class BetterTaskListDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAuditTrail(AuditTrail instance);
    partial void UpdateAuditTrail(AuditTrail instance);
    partial void DeleteAuditTrail(AuditTrail instance);
    partial void InsertActivityFeed(ActivityFeed instance);
    partial void UpdateActivityFeed(ActivityFeed instance);
    partial void DeleteActivityFeed(ActivityFeed instance);
    partial void InsertTicketComment(TicketComment instance);
    partial void UpdateTicketComment(TicketComment instance);
    partial void DeleteTicketComment(TicketComment instance);
    partial void InsertStreamComment(StreamComment instance);
    partial void UpdateStreamComment(StreamComment instance);
    partial void DeleteStreamComment(StreamComment instance);
    partial void InsertCoWorker(CoWorker instance);
    partial void UpdateCoWorker(CoWorker instance);
    partial void DeleteCoWorker(CoWorker instance);
    partial void InsertStream(Stream instance);
    partial void UpdateStream(Stream instance);
    partial void DeleteStream(Stream instance);
    partial void InsertProfile(Profile instance);
    partial void UpdateProfile(Profile instance);
    partial void DeleteProfile(Profile instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    #endregion
		
		public BetterTaskListDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BetterTaskListConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BetterTaskListDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BetterTaskListDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BetterTaskListDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BetterTaskListDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AuditTrail> AuditTrails
		{
			get
			{
				return this.GetTable<AuditTrail>();
			}
		}
		
		public System.Data.Linq.Table<ActivityFeed> ActivityFeeds
		{
			get
			{
				return this.GetTable<ActivityFeed>();
			}
		}
		
		public System.Data.Linq.Table<TicketComment> TicketComments
		{
			get
			{
				return this.GetTable<TicketComment>();
			}
		}
		
		public System.Data.Linq.Table<StreamComment> StreamComments
		{
			get
			{
				return this.GetTable<StreamComment>();
			}
		}
		
		public System.Data.Linq.Table<CoWorker> CoWorkers
		{
			get
			{
				return this.GetTable<CoWorker>();
			}
		}
		
		public System.Data.Linq.Table<Stream> Streams
		{
			get
			{
				return this.GetTable<Stream>();
			}
		}
		
		public System.Data.Linq.Table<Profile> Profiles
		{
			get
			{
				return this.GetTable<Profile>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<Profile> _Profiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public User()
		{
			this._Profiles = new EntitySet<Profile>(new Action<Profile>(this.attach_Profiles), new Action<Profile>(this.detach_Profiles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profile", Storage="_Profiles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Profile> Profiles
		{
			get
			{
				return this._Profiles;
			}
			set
			{
				this._Profiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Profiles(Profile entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_AuditTrail")]
	public partial class AuditTrail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _AuditTrailId;
		
		private string _AuditEventType;
		
		private string _AuditEventCategory;
		
		private System.DateTime _AuditEventTimeStamp;
		
		private string _AuditEventDescription;
		
		private long _AuditEventForeingKey;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditTrailIdChanging(long value);
    partial void OnAuditTrailIdChanged();
    partial void OnAuditEventTypeChanging(string value);
    partial void OnAuditEventTypeChanged();
    partial void OnAuditEventCategoryChanging(string value);
    partial void OnAuditEventCategoryChanged();
    partial void OnAuditEventTimeStampChanging(System.DateTime value);
    partial void OnAuditEventTimeStampChanged();
    partial void OnAuditEventDescriptionChanging(string value);
    partial void OnAuditEventDescriptionChanged();
    partial void OnAuditEventForeingKeyChanging(long value);
    partial void OnAuditEventForeingKeyChanged();
    #endregion
		
		public AuditTrail()
		{
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditTrailId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long AuditTrailId
		{
			get
			{
				return this._AuditTrailId;
			}
			set
			{
				if ((this._AuditTrailId != value))
				{
					this.OnAuditTrailIdChanging(value);
					this.SendPropertyChanging();
					this._AuditTrailId = value;
					this.SendPropertyChanged("AuditTrailId");
					this.OnAuditTrailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditEventType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuditEventType
		{
			get
			{
				return this._AuditEventType;
			}
			set
			{
				if ((this._AuditEventType != value))
				{
					this.OnAuditEventTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditEventType = value;
					this.SendPropertyChanged("AuditEventType");
					this.OnAuditEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditEventCategory", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AuditEventCategory
		{
			get
			{
				return this._AuditEventCategory;
			}
			set
			{
				if ((this._AuditEventCategory != value))
				{
					this.OnAuditEventCategoryChanging(value);
					this.SendPropertyChanging();
					this._AuditEventCategory = value;
					this.SendPropertyChanged("AuditEventCategory");
					this.OnAuditEventCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditEventTimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime AuditEventTimeStamp
		{
			get
			{
				return this._AuditEventTimeStamp;
			}
			set
			{
				if ((this._AuditEventTimeStamp != value))
				{
					this.OnAuditEventTimeStampChanging(value);
					this.SendPropertyChanging();
					this._AuditEventTimeStamp = value;
					this.SendPropertyChanged("AuditEventTimeStamp");
					this.OnAuditEventTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditEventDescription", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string AuditEventDescription
		{
			get
			{
				return this._AuditEventDescription;
			}
			set
			{
				if ((this._AuditEventDescription != value))
				{
					this.OnAuditEventDescriptionChanging(value);
					this.SendPropertyChanging();
					this._AuditEventDescription = value;
					this.SendPropertyChanged("AuditEventDescription");
					this.OnAuditEventDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditEventForeingKey", DbType="BigInt NOT NULL")]
		public long AuditEventForeingKey
		{
			get
			{
				return this._AuditEventForeingKey;
			}
			set
			{
				if ((this._AuditEventForeingKey != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditEventForeingKeyChanging(value);
					this.SendPropertyChanging();
					this._AuditEventForeingKey = value;
					this.SendPropertyChanged("AuditEventForeingKey");
					this.OnAuditEventForeingKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_AuditTrail", Storage="_Ticket", ThisKey="AuditEventForeingKey", OtherKey="TicketId", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.AuditTrails.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.AuditTrails.Add(this);
						this._AuditEventForeingKey = value.TicketId;
					}
					else
					{
						this._AuditEventForeingKey = default(long);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_Activity_Feed")]
	public partial class ActivityFeed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FeedId;
		
		private string _FeedActionDescription;
		
		private System.Guid _FeedActionCreatorUserId;
		
		private System.DateTime _FeedActionTimeStamp;
		
		private string _FeedActionDetails;
		
		private string _FeedMoreUrl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeedIdChanging(long value);
    partial void OnFeedIdChanged();
    partial void OnFeedActionDescriptionChanging(string value);
    partial void OnFeedActionDescriptionChanged();
    partial void OnFeedActionCreatorUserIdChanging(System.Guid value);
    partial void OnFeedActionCreatorUserIdChanged();
    partial void OnFeedActionTimeStampChanging(System.DateTime value);
    partial void OnFeedActionTimeStampChanged();
    partial void OnFeedActionDetailsChanging(string value);
    partial void OnFeedActionDetailsChanged();
    partial void OnFeedMoreUrlChanging(string value);
    partial void OnFeedMoreUrlChanged();
    #endregion
		
		public ActivityFeed()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long FeedId
		{
			get
			{
				return this._FeedId;
			}
			set
			{
				if ((this._FeedId != value))
				{
					this.OnFeedIdChanging(value);
					this.SendPropertyChanging();
					this._FeedId = value;
					this.SendPropertyChanged("FeedId");
					this.OnFeedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedActionDescription", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FeedActionDescription
		{
			get
			{
				return this._FeedActionDescription;
			}
			set
			{
				if ((this._FeedActionDescription != value))
				{
					this.OnFeedActionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FeedActionDescription = value;
					this.SendPropertyChanged("FeedActionDescription");
					this.OnFeedActionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedActionCreatorUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeedActionCreatorUserId
		{
			get
			{
				return this._FeedActionCreatorUserId;
			}
			set
			{
				if ((this._FeedActionCreatorUserId != value))
				{
					this.OnFeedActionCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._FeedActionCreatorUserId = value;
					this.SendPropertyChanged("FeedActionCreatorUserId");
					this.OnFeedActionCreatorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedActionTimeStamp", DbType="SmallDateTime NOT NULL")]
		public System.DateTime FeedActionTimeStamp
		{
			get
			{
				return this._FeedActionTimeStamp;
			}
			set
			{
				if ((this._FeedActionTimeStamp != value))
				{
					this.OnFeedActionTimeStampChanging(value);
					this.SendPropertyChanging();
					this._FeedActionTimeStamp = value;
					this.SendPropertyChanged("FeedActionTimeStamp");
					this.OnFeedActionTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedActionDetails", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string FeedActionDetails
		{
			get
			{
				return this._FeedActionDetails;
			}
			set
			{
				if ((this._FeedActionDetails != value))
				{
					this.OnFeedActionDetailsChanging(value);
					this.SendPropertyChanging();
					this._FeedActionDetails = value;
					this.SendPropertyChanged("FeedActionDetails");
					this.OnFeedActionDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeedMoreUrl", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FeedMoreUrl
		{
			get
			{
				return this._FeedMoreUrl;
			}
			set
			{
				if ((this._FeedMoreUrl != value))
				{
					this.OnFeedMoreUrlChanging(value);
					this.SendPropertyChanging();
					this._FeedMoreUrl = value;
					this.SendPropertyChanged("FeedMoreUrl");
					this.OnFeedMoreUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_Ticket_Comment")]
	public partial class TicketComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TicketId;
		
		private long _TicketCommentId;
		
		private int _TicketCommentKarma;
		
		private string _TicketCommentDetails;
		
		private long _TicketCommentParentId;
		
		private System.DateTime _TicketCommentTimeStamp;
		
		private System.Guid _TicketCommentSubmitterUserId;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(long value);
    partial void OnTicketIdChanged();
    partial void OnTicketCommentIdChanging(long value);
    partial void OnTicketCommentIdChanged();
    partial void OnTicketCommentKarmaChanging(int value);
    partial void OnTicketCommentKarmaChanged();
    partial void OnTicketCommentDetailsChanging(string value);
    partial void OnTicketCommentDetailsChanged();
    partial void OnTicketCommentParentIdChanging(long value);
    partial void OnTicketCommentParentIdChanged();
    partial void OnTicketCommentTimeStampChanging(System.DateTime value);
    partial void OnTicketCommentTimeStampChanged();
    partial void OnTicketCommentSubmitterUserIdChanging(System.Guid value);
    partial void OnTicketCommentSubmitterUserIdChanged();
    #endregion
		
		public TicketComment()
		{
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", DbType="BigInt NOT NULL")]
		public long TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCommentId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TicketCommentId
		{
			get
			{
				return this._TicketCommentId;
			}
			set
			{
				if ((this._TicketCommentId != value))
				{
					this.OnTicketCommentIdChanging(value);
					this.SendPropertyChanging();
					this._TicketCommentId = value;
					this.SendPropertyChanged("TicketCommentId");
					this.OnTicketCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCommentKarma", DbType="Int NOT NULL")]
		public int TicketCommentKarma
		{
			get
			{
				return this._TicketCommentKarma;
			}
			set
			{
				if ((this._TicketCommentKarma != value))
				{
					this.OnTicketCommentKarmaChanging(value);
					this.SendPropertyChanging();
					this._TicketCommentKarma = value;
					this.SendPropertyChanged("TicketCommentKarma");
					this.OnTicketCommentKarmaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCommentDetails", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string TicketCommentDetails
		{
			get
			{
				return this._TicketCommentDetails;
			}
			set
			{
				if ((this._TicketCommentDetails != value))
				{
					this.OnTicketCommentDetailsChanging(value);
					this.SendPropertyChanging();
					this._TicketCommentDetails = value;
					this.SendPropertyChanged("TicketCommentDetails");
					this.OnTicketCommentDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCommentParentId", DbType="BigInt NOT NULL")]
		public long TicketCommentParentId
		{
			get
			{
				return this._TicketCommentParentId;
			}
			set
			{
				if ((this._TicketCommentParentId != value))
				{
					this.OnTicketCommentParentIdChanging(value);
					this.SendPropertyChanging();
					this._TicketCommentParentId = value;
					this.SendPropertyChanged("TicketCommentParentId");
					this.OnTicketCommentParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCommentTimeStamp", DbType="SmallDateTime NOT NULL")]
		public System.DateTime TicketCommentTimeStamp
		{
			get
			{
				return this._TicketCommentTimeStamp;
			}
			set
			{
				if ((this._TicketCommentTimeStamp != value))
				{
					this.OnTicketCommentTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TicketCommentTimeStamp = value;
					this.SendPropertyChanged("TicketCommentTimeStamp");
					this.OnTicketCommentTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCommentSubmitterUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TicketCommentSubmitterUserId
		{
			get
			{
				return this._TicketCommentSubmitterUserId;
			}
			set
			{
				if ((this._TicketCommentSubmitterUserId != value))
				{
					this.OnTicketCommentSubmitterUserIdChanging(value);
					this.SendPropertyChanging();
					this._TicketCommentSubmitterUserId = value;
					this.SendPropertyChanged("TicketCommentSubmitterUserId");
					this.OnTicketCommentSubmitterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_TicketComment", Storage="_Ticket", ThisKey="TicketId", OtherKey="TicketId", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.TicketComments.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.TicketComments.Add(this);
						this._TicketId = value.TicketId;
					}
					else
					{
						this._TicketId = default(long);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_Stream_Comment")]
	public partial class StreamComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StreamId;
		
		private long _StreamCommentId;
		
		private string _StreamCommentDetails;
		
		private long _StreamCommentParentId;
		
		private System.DateTime _StreamCommentTimeStamp;
		
		private int _StreamCommentLikesCount;
		
		private System.Guid _StreamCommentSubmitterUserId;
		
		private string _StreamCommentSubmitterFullName;
		
		private EntityRef<Stream> _Stream;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStreamIdChanging(long value);
    partial void OnStreamIdChanged();
    partial void OnStreamCommentIdChanging(long value);
    partial void OnStreamCommentIdChanged();
    partial void OnStreamCommentDetailsChanging(string value);
    partial void OnStreamCommentDetailsChanged();
    partial void OnStreamCommentParentIdChanging(long value);
    partial void OnStreamCommentParentIdChanged();
    partial void OnStreamCommentTimeStampChanging(System.DateTime value);
    partial void OnStreamCommentTimeStampChanged();
    partial void OnStreamCommentLikesCountChanging(int value);
    partial void OnStreamCommentLikesCountChanged();
    partial void OnStreamCommentSubmitterUserIdChanging(System.Guid value);
    partial void OnStreamCommentSubmitterUserIdChanged();
    partial void OnStreamCommentSubmitterFullNameChanging(string value);
    partial void OnStreamCommentSubmitterFullNameChanged();
    #endregion
		
		public StreamComment()
		{
			this._Stream = default(EntityRef<Stream>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamId", DbType="BigInt NOT NULL")]
		public long StreamId
		{
			get
			{
				return this._StreamId;
			}
			set
			{
				if ((this._StreamId != value))
				{
					if (this._Stream.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStreamIdChanging(value);
					this.SendPropertyChanging();
					this._StreamId = value;
					this.SendPropertyChanged("StreamId");
					this.OnStreamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long StreamCommentId
		{
			get
			{
				return this._StreamCommentId;
			}
			set
			{
				if ((this._StreamCommentId != value))
				{
					this.OnStreamCommentIdChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentId = value;
					this.SendPropertyChanged("StreamCommentId");
					this.OnStreamCommentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentDetails", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string StreamCommentDetails
		{
			get
			{
				return this._StreamCommentDetails;
			}
			set
			{
				if ((this._StreamCommentDetails != value))
				{
					this.OnStreamCommentDetailsChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentDetails = value;
					this.SendPropertyChanged("StreamCommentDetails");
					this.OnStreamCommentDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentParentId", DbType="BigInt NOT NULL")]
		public long StreamCommentParentId
		{
			get
			{
				return this._StreamCommentParentId;
			}
			set
			{
				if ((this._StreamCommentParentId != value))
				{
					this.OnStreamCommentParentIdChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentParentId = value;
					this.SendPropertyChanged("StreamCommentParentId");
					this.OnStreamCommentParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentTimeStamp", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StreamCommentTimeStamp
		{
			get
			{
				return this._StreamCommentTimeStamp;
			}
			set
			{
				if ((this._StreamCommentTimeStamp != value))
				{
					this.OnStreamCommentTimeStampChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentTimeStamp = value;
					this.SendPropertyChanged("StreamCommentTimeStamp");
					this.OnStreamCommentTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentLikesCount", DbType="Int NOT NULL")]
		public int StreamCommentLikesCount
		{
			get
			{
				return this._StreamCommentLikesCount;
			}
			set
			{
				if ((this._StreamCommentLikesCount != value))
				{
					this.OnStreamCommentLikesCountChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentLikesCount = value;
					this.SendPropertyChanged("StreamCommentLikesCount");
					this.OnStreamCommentLikesCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentSubmitterUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StreamCommentSubmitterUserId
		{
			get
			{
				return this._StreamCommentSubmitterUserId;
			}
			set
			{
				if ((this._StreamCommentSubmitterUserId != value))
				{
					this.OnStreamCommentSubmitterUserIdChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentSubmitterUserId = value;
					this.SendPropertyChanged("StreamCommentSubmitterUserId");
					this.OnStreamCommentSubmitterUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentSubmitterFullName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string StreamCommentSubmitterFullName
		{
			get
			{
				return this._StreamCommentSubmitterFullName;
			}
			set
			{
				if ((this._StreamCommentSubmitterFullName != value))
				{
					this.OnStreamCommentSubmitterFullNameChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentSubmitterFullName = value;
					this.SendPropertyChanged("StreamCommentSubmitterFullName");
					this.OnStreamCommentSubmitterFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stream_StreamComment", Storage="_Stream", ThisKey="StreamId", OtherKey="StreamId", IsForeignKey=true)]
		public Stream Stream
		{
			get
			{
				return this._Stream.Entity;
			}
			set
			{
				Stream previousValue = this._Stream.Entity;
				if (((previousValue != value) 
							|| (this._Stream.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stream.Entity = null;
						previousValue.StreamComments.Remove(this);
					}
					this._Stream.Entity = value;
					if ((value != null))
					{
						value.StreamComments.Add(this);
						this._StreamId = value.StreamId;
					}
					else
					{
						this._StreamId = default(long);
					}
					this.SendPropertyChanged("Stream");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_CoWorker")]
	public partial class CoWorker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private bool _AreFriends;
		
		private long _CoWorkerId;
		
		private System.Guid _CoWorkerUserId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnAreFriendsChanging(bool value);
    partial void OnAreFriendsChanged();
    partial void OnCoWorkerIdChanging(long value);
    partial void OnCoWorkerIdChanged();
    partial void OnCoWorkerUserIdChanging(System.Guid value);
    partial void OnCoWorkerUserIdChanged();
    #endregion
		
		public CoWorker()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreFriends", DbType="Bit NOT NULL")]
		public bool AreFriends
		{
			get
			{
				return this._AreFriends;
			}
			set
			{
				if ((this._AreFriends != value))
				{
					this.OnAreFriendsChanging(value);
					this.SendPropertyChanging();
					this._AreFriends = value;
					this.SendPropertyChanged("AreFriends");
					this.OnAreFriendsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoWorkerId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CoWorkerId
		{
			get
			{
				return this._CoWorkerId;
			}
			set
			{
				if ((this._CoWorkerId != value))
				{
					this.OnCoWorkerIdChanging(value);
					this.SendPropertyChanging();
					this._CoWorkerId = value;
					this.SendPropertyChanged("CoWorkerId");
					this.OnCoWorkerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoWorkerUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CoWorkerUserId
		{
			get
			{
				return this._CoWorkerUserId;
			}
			set
			{
				if ((this._CoWorkerUserId != value))
				{
					this.OnCoWorkerUserIdChanging(value);
					this.SendPropertyChanging();
					this._CoWorkerUserId = value;
					this.SendPropertyChanged("CoWorkerUserId");
					this.OnCoWorkerUserIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_Stream")]
	public partial class Stream : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StreamId;
		
		private string _StreamType;
		
		private string _StreamDetails;
		
		private int _StreamLikesCount;
		
		private System.Nullable<System.Guid> _StreamTargetUserId;
		
		private System.Guid _StreamCreatorUserId;
		
		private int _StreamCommentCount;
		
		private string _StreamCreatorFullName;
		
		private System.DateTime _StreamCreatedTimeStamp;
		
		private System.DateTime _StreamLastUpdatedTimeStamp;
		
		private EntitySet<StreamComment> _StreamComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStreamIdChanging(long value);
    partial void OnStreamIdChanged();
    partial void OnStreamTypeChanging(string value);
    partial void OnStreamTypeChanged();
    partial void OnStreamDetailsChanging(string value);
    partial void OnStreamDetailsChanged();
    partial void OnStreamLikesCountChanging(int value);
    partial void OnStreamLikesCountChanged();
    partial void OnStreamTargetUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnStreamTargetUserIdChanged();
    partial void OnStreamCreatorUserIdChanging(System.Guid value);
    partial void OnStreamCreatorUserIdChanged();
    partial void OnStreamCommentCountChanging(int value);
    partial void OnStreamCommentCountChanged();
    partial void OnStreamCreatorFullNameChanging(string value);
    partial void OnStreamCreatorFullNameChanged();
    partial void OnStreamCreatedTimeStampChanging(System.DateTime value);
    partial void OnStreamCreatedTimeStampChanged();
    partial void OnStreamLastUpdatedTimeStampChanging(System.DateTime value);
    partial void OnStreamLastUpdatedTimeStampChanged();
    #endregion
		
		public Stream()
		{
			this._StreamComments = new EntitySet<StreamComment>(new Action<StreamComment>(this.attach_StreamComments), new Action<StreamComment>(this.detach_StreamComments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long StreamId
		{
			get
			{
				return this._StreamId;
			}
			set
			{
				if ((this._StreamId != value))
				{
					this.OnStreamIdChanging(value);
					this.SendPropertyChanging();
					this._StreamId = value;
					this.SendPropertyChanged("StreamId");
					this.OnStreamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamType", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string StreamType
		{
			get
			{
				return this._StreamType;
			}
			set
			{
				if ((this._StreamType != value))
				{
					this.OnStreamTypeChanging(value);
					this.SendPropertyChanging();
					this._StreamType = value;
					this.SendPropertyChanged("StreamType");
					this.OnStreamTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamDetails", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string StreamDetails
		{
			get
			{
				return this._StreamDetails;
			}
			set
			{
				if ((this._StreamDetails != value))
				{
					this.OnStreamDetailsChanging(value);
					this.SendPropertyChanging();
					this._StreamDetails = value;
					this.SendPropertyChanged("StreamDetails");
					this.OnStreamDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamLikesCount", DbType="Int NOT NULL")]
		public int StreamLikesCount
		{
			get
			{
				return this._StreamLikesCount;
			}
			set
			{
				if ((this._StreamLikesCount != value))
				{
					this.OnStreamLikesCountChanging(value);
					this.SendPropertyChanging();
					this._StreamLikesCount = value;
					this.SendPropertyChanged("StreamLikesCount");
					this.OnStreamLikesCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamTargetUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StreamTargetUserId
		{
			get
			{
				return this._StreamTargetUserId;
			}
			set
			{
				if ((this._StreamTargetUserId != value))
				{
					this.OnStreamTargetUserIdChanging(value);
					this.SendPropertyChanging();
					this._StreamTargetUserId = value;
					this.SendPropertyChanged("StreamTargetUserId");
					this.OnStreamTargetUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCreatorUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StreamCreatorUserId
		{
			get
			{
				return this._StreamCreatorUserId;
			}
			set
			{
				if ((this._StreamCreatorUserId != value))
				{
					this.OnStreamCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._StreamCreatorUserId = value;
					this.SendPropertyChanged("StreamCreatorUserId");
					this.OnStreamCreatorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCommentCount", DbType="Int NOT NULL")]
		public int StreamCommentCount
		{
			get
			{
				return this._StreamCommentCount;
			}
			set
			{
				if ((this._StreamCommentCount != value))
				{
					this.OnStreamCommentCountChanging(value);
					this.SendPropertyChanging();
					this._StreamCommentCount = value;
					this.SendPropertyChanged("StreamCommentCount");
					this.OnStreamCommentCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCreatorFullName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string StreamCreatorFullName
		{
			get
			{
				return this._StreamCreatorFullName;
			}
			set
			{
				if ((this._StreamCreatorFullName != value))
				{
					this.OnStreamCreatorFullNameChanging(value);
					this.SendPropertyChanging();
					this._StreamCreatorFullName = value;
					this.SendPropertyChanged("StreamCreatorFullName");
					this.OnStreamCreatorFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamCreatedTimeStamp", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StreamCreatedTimeStamp
		{
			get
			{
				return this._StreamCreatedTimeStamp;
			}
			set
			{
				if ((this._StreamCreatedTimeStamp != value))
				{
					this.OnStreamCreatedTimeStampChanging(value);
					this.SendPropertyChanging();
					this._StreamCreatedTimeStamp = value;
					this.SendPropertyChanged("StreamCreatedTimeStamp");
					this.OnStreamCreatedTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreamLastUpdatedTimeStamp", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StreamLastUpdatedTimeStamp
		{
			get
			{
				return this._StreamLastUpdatedTimeStamp;
			}
			set
			{
				if ((this._StreamLastUpdatedTimeStamp != value))
				{
					this.OnStreamLastUpdatedTimeStampChanging(value);
					this.SendPropertyChanging();
					this._StreamLastUpdatedTimeStamp = value;
					this.SendPropertyChanged("StreamLastUpdatedTimeStamp");
					this.OnStreamLastUpdatedTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stream_StreamComment", Storage="_StreamComments", ThisKey="StreamId", OtherKey="StreamId")]
		public EntitySet<StreamComment> StreamComments
		{
			get
			{
				return this._StreamComments;
			}
			set
			{
				this._StreamComments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StreamComments(StreamComment entity)
		{
			this.SendPropertyChanging();
			entity.Stream = this;
		}
		
		private void detach_StreamComments(StreamComment entity)
		{
			this.SendPropertyChanging();
			entity.Stream = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_Profile")]
	public partial class Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private long _ProfileId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _FullName;
		
		private string _AboutMe;
		
		private string _TimeZone;
		
		private string _PictureName;
		
		private string _CellPhoneCarrier;
		
		private string _CellPhoneNumber;
		
		private string _WorkPhoneNumber;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnProfileIdChanging(long value);
    partial void OnProfileIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnAboutMeChanging(string value);
    partial void OnAboutMeChanged();
    partial void OnTimeZoneChanging(string value);
    partial void OnTimeZoneChanged();
    partial void OnPictureNameChanging(string value);
    partial void OnPictureNameChanged();
    partial void OnCellPhoneCarrierChanging(string value);
    partial void OnCellPhoneCarrierChanged();
    partial void OnCellPhoneNumberChanging(string value);
    partial void OnCellPhoneNumberChanged();
    partial void OnWorkPhoneNumberChanging(string value);
    partial void OnWorkPhoneNumberChanged();
    #endregion
		
		public Profile()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(60)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(60)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(256)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AboutMe", DbType="NVarChar(500)")]
		public string AboutMe
		{
			get
			{
				return this._AboutMe;
			}
			set
			{
				if ((this._AboutMe != value))
				{
					this.OnAboutMeChanging(value);
					this.SendPropertyChanging();
					this._AboutMe = value;
					this.SendPropertyChanged("AboutMe");
					this.OnAboutMeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="NVarChar(50)")]
		public string TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PictureName", DbType="NVarChar(50)")]
		public string PictureName
		{
			get
			{
				return this._PictureName;
			}
			set
			{
				if ((this._PictureName != value))
				{
					this.OnPictureNameChanging(value);
					this.SendPropertyChanging();
					this._PictureName = value;
					this.SendPropertyChanged("PictureName");
					this.OnPictureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhoneCarrier", DbType="NVarChar(50)")]
		public string CellPhoneCarrier
		{
			get
			{
				return this._CellPhoneCarrier;
			}
			set
			{
				if ((this._CellPhoneCarrier != value))
				{
					this.OnCellPhoneCarrierChanging(value);
					this.SendPropertyChanging();
					this._CellPhoneCarrier = value;
					this.SendPropertyChanged("CellPhoneCarrier");
					this.OnCellPhoneCarrierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhoneNumber", DbType="NVarChar(50)")]
		public string CellPhoneNumber
		{
			get
			{
				return this._CellPhoneNumber;
			}
			set
			{
				if ((this._CellPhoneNumber != value))
				{
					this.OnCellPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._CellPhoneNumber = value;
					this.SendPropertyChanged("CellPhoneNumber");
					this.OnCellPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkPhoneNumber", DbType="NVarChar(50)")]
		public string WorkPhoneNumber
		{
			get
			{
				return this._WorkPhoneNumber;
			}
			set
			{
				if ((this._WorkPhoneNumber != value))
				{
					this.OnWorkPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._WorkPhoneNumber = value;
					this.SendPropertyChanged("WorkPhoneNumber");
					this.OnWorkPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Profile", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Profiles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Profiles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BetterTaskList_Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _TicketId;
		
		private string _TicketTags;
		
		private string _TicketStatus;
		
		private string _TicketPriority;
		
		private string _TicketSubject;
		
		private System.Nullable<System.DateTime> _TicketDueDate;
		
		private string _TicketDescription;
		
		private System.Nullable<System.DateTime> _TicketCreatedDate;
		
		private System.Nullable<System.DateTime> _TicketLastUpdated;
		
		private System.Guid _TicketCreatorUserId;
		
		private System.Nullable<long> _TicketResolutionTime;
		
		private System.Nullable<System.DateTime> _TicketStartTimeStamp;
		
		private string _TicketOwnersEmailList;
		
		private System.Nullable<System.DateTime> _TicketFinishTimeStamp;
		
		private string _TicketResolutionDetails;
		
		private System.Nullable<System.Guid> _TicketResolvedByUserId;
		
		private string _TicketEmailNotificationList;
		
		private EntitySet<AuditTrail> _AuditTrails;
		
		private EntitySet<TicketComment> _TicketComments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(long value);
    partial void OnTicketIdChanged();
    partial void OnTicketTagsChanging(string value);
    partial void OnTicketTagsChanged();
    partial void OnTicketStatusChanging(string value);
    partial void OnTicketStatusChanged();
    partial void OnTicketPriorityChanging(string value);
    partial void OnTicketPriorityChanged();
    partial void OnTicketSubjectChanging(string value);
    partial void OnTicketSubjectChanged();
    partial void OnTicketDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTicketDueDateChanged();
    partial void OnTicketDescriptionChanging(string value);
    partial void OnTicketDescriptionChanged();
    partial void OnTicketCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTicketCreatedDateChanged();
    partial void OnTicketLastUpdatedChanging(System.Nullable<System.DateTime> value);
    partial void OnTicketLastUpdatedChanged();
    partial void OnTicketCreatorUserIdChanging(System.Guid value);
    partial void OnTicketCreatorUserIdChanged();
    partial void OnTicketResolutionTimeChanging(System.Nullable<long> value);
    partial void OnTicketResolutionTimeChanged();
    partial void OnTicketStartTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTicketStartTimeStampChanged();
    partial void OnTicketOwnersEmailListChanging(string value);
    partial void OnTicketOwnersEmailListChanged();
    partial void OnTicketFinishTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTicketFinishTimeStampChanged();
    partial void OnTicketResolutionDetailsChanging(string value);
    partial void OnTicketResolutionDetailsChanged();
    partial void OnTicketResolvedByUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnTicketResolvedByUserIdChanged();
    partial void OnTicketEmailNotificationListChanging(string value);
    partial void OnTicketEmailNotificationListChanged();
    #endregion
		
		public Ticket()
		{
			this._AuditTrails = new EntitySet<AuditTrail>(new Action<AuditTrail>(this.attach_AuditTrails), new Action<AuditTrail>(this.detach_AuditTrails));
			this._TicketComments = new EntitySet<TicketComment>(new Action<TicketComment>(this.attach_TicketComments), new Action<TicketComment>(this.detach_TicketComments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketTags", DbType="NVarChar(500)")]
		public string TicketTags
		{
			get
			{
				return this._TicketTags;
			}
			set
			{
				if ((this._TicketTags != value))
				{
					this.OnTicketTagsChanging(value);
					this.SendPropertyChanging();
					this._TicketTags = value;
					this.SendPropertyChanged("TicketTags");
					this.OnTicketTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketStatus", DbType="NVarChar(20)")]
		public string TicketStatus
		{
			get
			{
				return this._TicketStatus;
			}
			set
			{
				if ((this._TicketStatus != value))
				{
					this.OnTicketStatusChanging(value);
					this.SendPropertyChanging();
					this._TicketStatus = value;
					this.SendPropertyChanged("TicketStatus");
					this.OnTicketStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketPriority", DbType="NVarChar(7)")]
		public string TicketPriority
		{
			get
			{
				return this._TicketPriority;
			}
			set
			{
				if ((this._TicketPriority != value))
				{
					this.OnTicketPriorityChanging(value);
					this.SendPropertyChanging();
					this._TicketPriority = value;
					this.SendPropertyChanged("TicketPriority");
					this.OnTicketPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketSubject", DbType="NVarChar(250)")]
		public string TicketSubject
		{
			get
			{
				return this._TicketSubject;
			}
			set
			{
				if ((this._TicketSubject != value))
				{
					this.OnTicketSubjectChanging(value);
					this.SendPropertyChanging();
					this._TicketSubject = value;
					this.SendPropertyChanged("TicketSubject");
					this.OnTicketSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketDueDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TicketDueDate
		{
			get
			{
				return this._TicketDueDate;
			}
			set
			{
				if ((this._TicketDueDate != value))
				{
					this.OnTicketDueDateChanging(value);
					this.SendPropertyChanging();
					this._TicketDueDate = value;
					this.SendPropertyChanged("TicketDueDate");
					this.OnTicketDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketDescription", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TicketDescription
		{
			get
			{
				return this._TicketDescription;
			}
			set
			{
				if ((this._TicketDescription != value))
				{
					this.OnTicketDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TicketDescription = value;
					this.SendPropertyChanged("TicketDescription");
					this.OnTicketDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCreatedDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TicketCreatedDate
		{
			get
			{
				return this._TicketCreatedDate;
			}
			set
			{
				if ((this._TicketCreatedDate != value))
				{
					this.OnTicketCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._TicketCreatedDate = value;
					this.SendPropertyChanged("TicketCreatedDate");
					this.OnTicketCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketLastUpdated", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TicketLastUpdated
		{
			get
			{
				return this._TicketLastUpdated;
			}
			set
			{
				if ((this._TicketLastUpdated != value))
				{
					this.OnTicketLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._TicketLastUpdated = value;
					this.SendPropertyChanged("TicketLastUpdated");
					this.OnTicketLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketCreatorUserId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TicketCreatorUserId
		{
			get
			{
				return this._TicketCreatorUserId;
			}
			set
			{
				if ((this._TicketCreatorUserId != value))
				{
					this.OnTicketCreatorUserIdChanging(value);
					this.SendPropertyChanging();
					this._TicketCreatorUserId = value;
					this.SendPropertyChanged("TicketCreatorUserId");
					this.OnTicketCreatorUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketResolutionTime", DbType="BigInt")]
		public System.Nullable<long> TicketResolutionTime
		{
			get
			{
				return this._TicketResolutionTime;
			}
			set
			{
				if ((this._TicketResolutionTime != value))
				{
					this.OnTicketResolutionTimeChanging(value);
					this.SendPropertyChanging();
					this._TicketResolutionTime = value;
					this.SendPropertyChanged("TicketResolutionTime");
					this.OnTicketResolutionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketStartTimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TicketStartTimeStamp
		{
			get
			{
				return this._TicketStartTimeStamp;
			}
			set
			{
				if ((this._TicketStartTimeStamp != value))
				{
					this.OnTicketStartTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TicketStartTimeStamp = value;
					this.SendPropertyChanged("TicketStartTimeStamp");
					this.OnTicketStartTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketOwnersEmailList", DbType="NVarChar(1500)")]
		public string TicketOwnersEmailList
		{
			get
			{
				return this._TicketOwnersEmailList;
			}
			set
			{
				if ((this._TicketOwnersEmailList != value))
				{
					this.OnTicketOwnersEmailListChanging(value);
					this.SendPropertyChanging();
					this._TicketOwnersEmailList = value;
					this.SendPropertyChanged("TicketOwnersEmailList");
					this.OnTicketOwnersEmailListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketFinishTimeStamp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> TicketFinishTimeStamp
		{
			get
			{
				return this._TicketFinishTimeStamp;
			}
			set
			{
				if ((this._TicketFinishTimeStamp != value))
				{
					this.OnTicketFinishTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TicketFinishTimeStamp = value;
					this.SendPropertyChanged("TicketFinishTimeStamp");
					this.OnTicketFinishTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketResolutionDetails", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string TicketResolutionDetails
		{
			get
			{
				return this._TicketResolutionDetails;
			}
			set
			{
				if ((this._TicketResolutionDetails != value))
				{
					this.OnTicketResolutionDetailsChanging(value);
					this.SendPropertyChanging();
					this._TicketResolutionDetails = value;
					this.SendPropertyChanged("TicketResolutionDetails");
					this.OnTicketResolutionDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketResolvedByUserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TicketResolvedByUserId
		{
			get
			{
				return this._TicketResolvedByUserId;
			}
			set
			{
				if ((this._TicketResolvedByUserId != value))
				{
					this.OnTicketResolvedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._TicketResolvedByUserId = value;
					this.SendPropertyChanged("TicketResolvedByUserId");
					this.OnTicketResolvedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketEmailNotificationList", DbType="NVarChar(1500)")]
		public string TicketEmailNotificationList
		{
			get
			{
				return this._TicketEmailNotificationList;
			}
			set
			{
				if ((this._TicketEmailNotificationList != value))
				{
					this.OnTicketEmailNotificationListChanging(value);
					this.SendPropertyChanging();
					this._TicketEmailNotificationList = value;
					this.SendPropertyChanged("TicketEmailNotificationList");
					this.OnTicketEmailNotificationListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_AuditTrail", Storage="_AuditTrails", ThisKey="TicketId", OtherKey="AuditEventForeingKey")]
		public EntitySet<AuditTrail> AuditTrails
		{
			get
			{
				return this._AuditTrails;
			}
			set
			{
				this._AuditTrails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_TicketComment", Storage="_TicketComments", ThisKey="TicketId", OtherKey="TicketId")]
		public EntitySet<TicketComment> TicketComments
		{
			get
			{
				return this._TicketComments;
			}
			set
			{
				this._TicketComments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditTrails(AuditTrail entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_AuditTrails(AuditTrail entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
		
		private void attach_TicketComments(TicketComment entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_TicketComments(TicketComment entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
}
#pragma warning restore 1591
